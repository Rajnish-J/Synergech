package final_assignment;

import java.util.Scanner;

public class DistinctPermutations {

	// Method to calculate factorial of a number
	public static long factorial(int n) {
		long fact = 1;
		for (int i = 2; i <= n; i++) {
			fact *= i;
		}
		return fact;
	}

	// Method to calculate distinct permutations without duplicates
	public static long countDistinctPermutations(String word) {
		int n = word.length();

		// Create an array to count the frequency of each character (both uppercase and
		// lowercase letters)
		int[] freq = new int[52]; // 26 lowercase + 26 uppercase

		// Count frequency of each character
		for (int i = 0; i < n; i++) {
			char ch = word.charAt(i);
			if (Character.isLowerCase(ch)) {
				freq[ch - 'a']++;
			} else if (Character.isUpperCase(ch)) {
				freq[ch - 'A' + 26]++; // Offset for uppercase letters
			}
		}

		// Calculate total permutations (n!)
		long totalPermutations = factorial(n);

		// Divide by the factorial of the frequency of each repeated character
		for (int i = 0; i < 52; i++) {
			if (freq[i] > 1) {
				totalPermutations /= factorial(freq[i]);
			}
		}

		return totalPermutations;
	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		System.out.print("Enter a word: ");
		String word = scanner.nextLine();

		long result = countDistinctPermutations(word);
		System.out.println("Number of distinct words that can be formed: " + result);
	}
}
